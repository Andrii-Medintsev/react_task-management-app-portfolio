{"version":3,"sources":["types/FilterType.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosFilter/TodosFilter.tsx","types/ErrorType.ts","components/Header/Header.tsx","utils/fetchClient.ts","api.ts","App.tsx","index.tsx"],"names":["FilterType","TodoItem","todo","onHandleToggleComplete","onDeleteTodo","onPatchTodo","useState","isEditing","setIsEditing","title","editingTitle","setEditingTitle","className","classNames","completed","editing","type","id","checked","onChange","onDoubleClick","onClick","autoFocus","value","e","target","onKeyDown","key","onBlur","TodoList","todos","isSomeTodos","areAllCompleted","onToggleComplete","onToggleAll","htmlFor","TransitionGroup","map","CSSTransition","timeout","ErrorType","TodosFilter","activeTodosAmount","completedTodosAmount","onFilterTodos","onClearCompletedTodos","to","isActive","ALL","ACTIVE","COMPLETED","Header","newTodoTitle","onTitleChange","onFormSubmit","onSubmit","placeholder","request","url","data","options","method","body","JSON","stringify","headers","fetch","then","response","ok","Error","json","client","deleteTodo","todoId","toggleCompleted","USER_ID","App","nodeRef","useRef","inProp","setInProp","userName","setUserName","setTodos","setNewTodoTitle","filterOption","setFilterOption","None","errorMessage","setErrorMessage","defaultStyle","transition","opacity","transitionStyles","entering","entered","exiting","exited","handleSetError","msg","setTimeout","saveTodos","localStorage","setItem","useEffect","userId","res","name","catch","NoUser","getTodos","NoTodos","window","location","hash","visibleTodos","option","todosToFilter","filter","getFilteredTodos","activeTodos","completedTodos","every","preventDefault","trim","EmptyTitle","newTodo","UnableCompleteAction","finally","length","updatedTodos","index","findIndex","checkedStatus","promises","Promise","all","updateTodoTitle","Transition","in","state","ref","style","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.980cb80e.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  onHandleToggleComplete: (todoId: number) => void,\n  onDeleteTodo: (todoId: number) => void,\n  onPatchTodo: (todoId: number, title: string) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  onHandleToggleComplete,\n  onDeleteTodo,\n  onPatchTodo,\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editingTitle, setEditingTitle] = useState(todo.title);\n\n  const handlePatchTodo = (e: React.KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      setEditingTitle(todo.title);\n      setIsEditing(false);\n\n      return;\n    }\n\n    if (e.key === 'Enter' && !editingTitle) {\n      onDeleteTodo(todo.id);\n      setIsEditing(false);\n\n      return;\n    }\n\n    if (e.key === 'Enter') {\n      onPatchTodo(todo.id, editingTitle);\n      setIsEditing(false);\n    }\n  };\n\n  const handleBlurInput = () => {\n    if (!editingTitle) {\n      onDeleteTodo(todo.id);\n      setIsEditing(false);\n\n      return;\n    }\n\n    if (editingTitle === todo.title) {\n      setIsEditing(false);\n\n      return;\n    }\n\n    onPatchTodo(todo.id, editingTitle);\n    setIsEditing(false);\n  };\n\n  return (\n    <li className={classNames(\n      { completed: todo.completed },\n      { editing: isEditing },\n    )}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id=\"toggle-view\"\n          checked={todo.completed}\n          onChange={() => onHandleToggleComplete(todo.id)}\n        />\n\n        <span onDoubleClick={() => setIsEditing(true)}>\n          {editingTitle}\n        </span>\n\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          aria-label=\"destroy-button\"\n          onClick={() => onDeleteTodo(todo.id)}\n        />\n      </div>\n\n      {isEditing && (\n        <input\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          value={editingTitle}\n          onChange={(e) => setEditingTitle(e.target.value)}\n          onKeyDown={handlePatchTodo}\n          onBlur={handleBlurInput}\n        />\n      )}\n    </li>\n  );\n};\n","import React from 'react';\nimport {\n  CSSTransition,\n  TransitionGroup,\n} from 'react-transition-group';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  isSomeTodos: boolean,\n  areAllCompleted: boolean,\n  onToggleComplete: (todoId: number) => void,\n  onToggleAll: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  onDeleteTodo: (todoId: number) => void,\n  onPatchTodo: (todoId: number, title: string) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  isSomeTodos,\n  areAllCompleted,\n  onToggleComplete,\n  onToggleAll,\n  onDeleteTodo,\n  onPatchTodo,\n}) => (\n  <section className=\"main\">\n    {isSomeTodos && (\n      <>\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          data-cy=\"toggleAll\"\n          checked={areAllCompleted}\n          onChange={onToggleAll}\n        />\n\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      </>\n    )}\n\n    <ul className=\"todo-list\" data-cy=\"todoList\">\n      <TransitionGroup>\n        {todos.map(todo => (\n          <CSSTransition\n            key={todo.id}\n            timeout={800}\n            classNames=\"item\"\n          >\n            <TodoItem\n              todo={todo}\n              key={todo.id}\n              onHandleToggleComplete={onToggleComplete}\n              onDeleteTodo={onDeleteTodo}\n              onPatchTodo={onPatchTodo}\n            />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </ul>\n  </section>\n);\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  activeTodosAmount: number,\n  completedTodosAmount: number,\n  onFilterTodos: (arg: FilterType) => void,\n  onClearCompletedTodos: () => void,\n};\n\nexport const TodosFilter: React.FC<Props> = ({\n  activeTodosAmount,\n  completedTodosAmount,\n  onFilterTodos,\n  onClearCompletedTodos,\n}) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\" data-cy=\"todosCounter\">\n      {activeTodosAmount === 1\n        ? '1 item left'\n        : `${activeTodosAmount} items left`}\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <NavLink\n          to=\"/\"\n          className={({ isActive }) => (isActive ? 'selected' : '')}\n          onClick={() => onFilterTodos(FilterType.ALL)}\n        >\n          All\n        </NavLink>\n      </li>\n\n      <li>\n        <NavLink\n          to=\"/active\"\n          className={({ isActive }) => (isActive ? 'selected' : '')}\n          onClick={() => onFilterTodos(FilterType.ACTIVE)}\n        >\n          Active\n        </NavLink>\n      </li>\n\n      <li>\n        <NavLink\n          to=\"/completed\"\n          className={({ isActive }) => (isActive ? 'selected' : '')}\n          onClick={() => onFilterTodos(FilterType.COMPLETED)}\n        >\n          Completed\n        </NavLink>\n      </li>\n    </ul>\n\n    {completedTodosAmount > 0 && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onClearCompletedTodos}\n      >\n        Clear completed\n      </button>\n    )}\n  </footer>\n);\n","// eslint-disable-next-line no-shadow\nexport enum ErrorType {\n  None = '',\n  EmptyTitle = 'Title can\\'t be empty',\n  NoUser = 'No such user',\n  NoTodos = 'No current todos',\n  UnableCompleteAction = 'Something went wrong',\n}\n","import React from 'react';\n\ntype Props = {\n  newTodoTitle: string,\n  onTitleChange: (arg: string) => void,\n  onFormSubmit: (e: React.FormEvent) => void,\n};\n\nexport const Header: React.FC<Props> = ({\n  newTodoTitle,\n  onTitleChange,\n  onFormSubmit,\n}) => (\n  <header className=\"header\">\n    <form onSubmit={onFormSubmit}>\n      <input\n        // eslint-disable-next-line jsx-a11y/no-autofocus\n        autoFocus\n        type=\"text\"\n        data-cy=\"createTodo\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodoTitle}\n        onChange={(e) => onTitleChange(e.target.value)}\n      />\n    </form>\n  </header>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\n\ntype NewTodo = {\n  userId: number,\n  title: string,\n  completed: boolean,\n};\n\nexport const getUser = (userId: number) => {\n  return client.get<User>(`/users/${userId}`);\n};\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const addTodo = (data: NewTodo) => {\n  return client.post<Todo>('/todos', data);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const toggleCompleted = (todoId: number, completed: boolean) => {\n  return client.patch(`/todos/${todoId}`, { completed });\n};\n\nexport const updateTodoTitle = (todoId: number, title: string) => {\n  return client.patch(`/todos/${todoId}`, { title });\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Transition } from 'react-transition-group';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter/TodosFilter';\nimport { Header } from './components/Header';\nimport { FilterType } from './types/FilterType';\nimport { ErrorType } from './types/ErrorType';\nimport { TransitioObjectType } from './types/TransitionObjectType';\nimport {\n  addTodo,\n  deleteTodo,\n  getTodos,\n  getUser,\n  toggleCompleted,\n  updateTodoTitle,\n} from './api';\n\nconst USER_ID = 10812;\n\nexport const App: React.FC = () => {\n  const nodeRef = useRef(null);\n  const [inProp, setInProp] = useState(false);\n  const [userName, setUserName] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [filterOption, setFilterOption] = useState(FilterType.ALL);\n  const [errorMessage, setErrorMessage] = useState(ErrorType.None);\n\n  const defaultStyle = {\n    transition: 'opacity 300ms ease-in-out',\n    opacity: 0,\n  };\n\n  const transitionStyles: TransitioObjectType = {\n    entering: { opacity: 1 },\n    entered: { opacity: 1 },\n    exiting: { opacity: 0 },\n    exited: { opacity: 0 },\n  };\n\n  const handleSetError = (msg: ErrorType) => {\n    if (msg === ErrorType.None) {\n      return;\n    }\n\n    setInProp(true);\n    setErrorMessage(msg);\n\n    setTimeout(() => {\n      setInProp(false);\n    }, 3000);\n  };\n\n  const saveTodos = (value: Todo[]) => {\n    setTodos(value);\n    localStorage.setItem('todos', JSON.stringify(value));\n  };\n\n  useEffect(() => {\n    getUser(USER_ID)\n      .then(res => setUserName(res.name))\n      .catch(() => handleSetError(ErrorType.NoUser));\n\n    getTodos(USER_ID)\n      .then(res => saveTodos(res))\n      .catch(() => handleSetError(ErrorType.NoTodos));\n\n    switch (window.location.hash) {\n      case '#/active':\n        setFilterOption(FilterType.ACTIVE);\n        break;\n\n      case '#/completed':\n        setFilterOption(FilterType.COMPLETED);\n        break;\n\n      default:\n        setFilterOption(FilterType.ALL);\n    }\n  }, []);\n\n  const handleFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    handleSetError(ErrorType.None);\n\n    if (!newTodoTitle.trim()) {\n      setNewTodoTitle('');\n      handleSetError(ErrorType.EmptyTitle);\n\n      return;\n    }\n\n    addTodo({\n      userId: USER_ID,\n      title: newTodoTitle,\n      completed: false,\n    })\n      .then(response => {\n        const newTodo = {\n          id: response.id,\n          title: response.title,\n          completed: response.completed,\n        };\n\n        saveTodos([...todos, newTodo]);\n      })\n      .catch(() => {\n        handleSetError(ErrorType.UnableCompleteAction);\n      })\n      .finally(() => setNewTodoTitle(''));\n  };\n\n  const getFilteredTodos = (option: FilterType, todosToFilter: Todo[]) => {\n    switch (option) {\n      case FilterType.ACTIVE:\n        return todosToFilter.filter(todo => todo.completed === false);\n\n      case FilterType.COMPLETED:\n        return todosToFilter.filter(todo => todo.completed === true);\n\n      default:\n        return todosToFilter;\n    }\n  };\n\n  const visibleTodos = getFilteredTodos(filterOption, todos);\n  const activeTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n  const areAllCompleted = todos.every(todo => todo.completed);\n\n  const handleToggleCompleted = (todoId: number) => {\n    const updatedTodos = [...todos];\n    const index = updatedTodos.findIndex(todo => todo.id === todoId);\n\n    updatedTodos[index].completed = !updatedTodos[index].completed;\n\n    saveTodos(updatedTodos);\n\n    toggleCompleted(todoId, updatedTodos[index].completed)\n      .then()\n      .catch(() => {\n        handleSetError(ErrorType.UnableCompleteAction);\n        updatedTodos[index].completed = !updatedTodos[index].completed;\n        saveTodos(updatedTodos);\n      });\n  };\n\n  const handleToggleAll = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const checkedStatus = e.target.checked;\n    const updatedTodos\n      = [...todos].map(todo => ({\n        ...todo,\n        completed: checkedStatus,\n      }));\n\n    const promises = updatedTodos\n      .map(todo => toggleCompleted(todo.id, checkedStatus));\n\n    saveTodos(updatedTodos);\n\n    Promise.all(promises)\n      .then()\n      .catch(() => {\n        handleSetError(ErrorType.UnableCompleteAction);\n        saveTodos([...todos]);\n      });\n  };\n\n  const handleDeleteTodo = (todoId: number) => {\n    const updatedTodos = [...todos].filter(todo => todo.id !== todoId);\n\n    saveTodos(updatedTodos);\n\n    deleteTodo(todoId)\n      .then()\n      .catch(() => {\n        handleSetError(ErrorType.UnableCompleteAction);\n        saveTodos(todos);\n      });\n  };\n\n  const handleClearCompletedTodos = () => {\n    const promises = completedTodos.map(todo => deleteTodo(todo.id));\n\n    saveTodos(activeTodos);\n\n    Promise.all(promises)\n      .then()\n      .catch(() => {\n        handleSetError(ErrorType.UnableCompleteAction);\n        saveTodos([...todos]);\n      });\n  };\n\n  const handlePatchTodo = (todoId: number, title: string) => {\n    const updatedTodos = [...todos].map(todo => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        title,\n      };\n    });\n\n    saveTodos(updatedTodos);\n\n    updateTodoTitle(todoId, title)\n      .then()\n      .catch(() => {\n        handleSetError(ErrorType.UnableCompleteAction);\n        saveTodos([...todos]);\n      });\n  };\n\n  return (\n    <div className=\"todoapp\">\n      {userName && (\n        <>\n          {!userName\n            ? (\n              <h1 className=\"no-user\">tasks</h1>\n            ) : <h1>{`${userName}'s tasks`}</h1>}\n\n          <Header\n            newTodoTitle={newTodoTitle}\n            onTitleChange={setNewTodoTitle}\n            onFormSubmit={handleFormSubmit}\n          />\n\n          <TodoList\n            todos={visibleTodos}\n            isSomeTodos={todos.length > 0}\n            areAllCompleted={areAllCompleted}\n            onToggleComplete={handleToggleCompleted}\n            onToggleAll={handleToggleAll}\n            onDeleteTodo={handleDeleteTodo}\n            onPatchTodo={handlePatchTodo}\n          />\n\n          {todos.length > 0 && (\n            <TodosFilter\n              activeTodosAmount={activeTodos.length}\n              completedTodosAmount={completedTodos.length}\n              onFilterTodos={setFilterOption}\n              onClearCompletedTodos={handleClearCompletedTodos}\n            />\n          )}\n        </>\n      )}\n\n      <Transition nodeRef={nodeRef} in={inProp} timeout={300}>\n        {state => (\n          <div\n            className=\"error\"\n            ref={nodeRef}\n            style={{\n              ...defaultStyle,\n              ...transitionStyles[state as keyof TransitioObjectType],\n            }}\n          >\n            {errorMessage}\n            <button\n              type=\"button\"\n              className=\"error__button\"\n              aria-label=\"close__error\"\n              onClick={() => setInProp(false)}\n            />\n          </div>\n        )}\n      </Transition>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\nimport './styles/error.css';\nimport './styles/transitions.css';\n\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root') as HTMLElement,\n);\n"],"sourceRoot":""}